# =============================================================================
# Fluent Bit 4.0 설정 - 안전한 단일 인덱스 구조
# =============================================================================

[SERVICE]
    Log_Level    info
    Daemon       Off
    Refresh_Interval    1
    HTTP_Server  On
    HTTP_Listen  0.0.0.0
    HTTP_Port    2020
    Flush        1
    Grace        5

# =============================================================================
# INPUT 섹션 - 통합 TCP 입력
# =============================================================================

# TCP 입력 - log4j2에서 모든 로그 타입을 JSON으로 전송
[INPUT]
    Name        tcp
    Tag         java.all
    Listen      0.0.0.0
    Port        24224
    Format      json
    Chunk_Size  64
    Buffer_Size 128

# =============================================================================
# FILTER 섹션 - 로그 타입별 태깅
# =============================================================================

# 공통 메타데이터 추가
[FILTER]
    Name    modify
    Match   java.all
    Add     source tcp
    Add     collector fluent-bit

[FILTER]
    Name    lua
    Match   java.all
    code    function build_index_name(tag, timestamp, record) local application = record["application"] or "unknown-default"; local app_name, environment = string.match(application, "^([^%-]+)%-(.+)$"); if not app_name then app_name = application; environment = "default"; end; app_name = string.lower(app_name):gsub("[^a-z0-9]", ""); environment = string.lower(environment):gsub("[^a-z0-9]", ""); local index_name = app_name .. "-" .. environment; record["es_index"] = index_name; record["app"] = app_name; record["env"] = environment; return 1, timestamp, record; end
    call    build_index_name

# ERROR 레벨 로그에 대한 추가 태깅
[FILTER]
    Name    modify
    Match   java.all
    Condition Key_value_matches level ^ERROR$
    Add     priority critical
    Add     alert_required true

# SQL 로그 추가 태깅
[FILTER]
    Name    modify
    Match   java.all
    Condition Key_value_matches log_type ^sql_query$
    Add     log_category sql

# 애플리케이션 로그 추가 태깅
[FILTER]
    Name    modify
    Match   java.all
    Condition Key_value_matches log_type ^application$
    Add     log_category application

# 에러 로그 추가 태깅
[FILTER]
    Name    modify
    Match   java.all
    Condition Key_value_matches log_type ^error$
    Add     log_category error
    Add     priority critical
    Add     alert_required true

# =============================================================================
# OUTPUT 섹션 - 단일 안전한 출력
# =============================================================================

[OUTPUT]
    Name es
    Match java.all
    Host elasticsearch
    Port 9200
    Logstash_Format On
    Logstash_Prefix_Key es_index
    Logstash_DateFormat %Y.%m.%d
    suppress_type_name On
    include_tag_key On
    Generate_ID On
    Buffer_Size 1MB
    Retry_Limit 5
    Workers 2

# DEBUG 출력 (개발 중에만 사용)
[OUTPUT]
    Name  stdout
    Match java.all
    Format json_lines